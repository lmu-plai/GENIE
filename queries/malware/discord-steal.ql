/**
 * @name discord-steal
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 10.0
 * @precision low
 * @id npm/color-xzibit
 * @tags security
 *       malware
 */

import javascript
import DataFlow::PathGraph


// Taint-Tracking configuration for this problem
class Discord_OS_Configuration extends TaintTracking::Configuration {
    Discord_OS_Configuration() { this = "Discord_OS" }

    // Source: OS information through specific call
    override predicate isSource(DataFlow::Node source) {
        exists( DataFlow::SourceNode os
              | os = DataFlow::moduleMember("os", [ "hostname"
                                                  , "homedir"
                                                  , "arch"
                                                  , "cpus"
                                                  , "endianness"
                                                  ]
                                           )
              | os = source.(DataFlow::InvokeNode).getCalleeNode()
              )
    }

    // Sink: Header of an HTTP Request
    override predicate isSink(DataFlow::Node sink) {
        exists( ClientRequest request
              | sink = request.getOptionArgument(_, "headers")
              )
    }

    // Additional-Step: Storing the information in an object property
    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
        exists( DataFlow::PropWrite propWrite
              | propWrite.writes(succ, _, pred)
              )
    }
}


// To improve query's result message information...
string recoverMethodName(DataFlow::MethodCallNode node) { result = node.getMethodName() }


from Discord_OS_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink, int flowCount, string scriptFile, string methodName
where cfg.hasFlowPath(source, sink)
  and methodName = recoverMethodName( source.getNode() )
  // Requirement: >= 3 unique sources (based on method name) to the same sink
  and flowCount = count( string s | exists( DataFlow::PathNode other
                                          | cfg.hasFlowPath(other, sink)
                                          | s = recoverMethodName( other.getNode() )
                                          )
                       )
  and flowCount >= 3
  // Requirement: spawn of new hidden process
  and exists( SystemCommandExecution process, DataFlow::Node command, DataFlow::ArrayCreationNode arguments
            | process.getACommandArgument() = command and process.getArgumentList() = arguments
            | command.mayHaveStringValue("node") and arguments.getAnElement().mayHaveStringValue(scriptFile)
            )
  and scriptFile = source.getNode().getFile().getBaseName()
  and scriptFile =   sink.getNode().getFile().getBaseName()
select sink.getNode(),
       source,
       sink,
       "$@ to $@" + " | Flow Count: " + flowCount + " | Script File: " + scriptFile + " | Method Name: " + methodName,
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
