/**
 * @name bug_bounty_package
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 9.0
 * @precision low
 * @id npm/zomato-ui
 * @tags security
 *       data
 *       taint
 */

import javascript
import DataFlow::PathGraph


// Taint-Tracking configuration for this problem
class BugBounty_Configuration extends TaintTracking::Configuration {
    BugBounty_Configuration() { this = "BugBounty" }

    // Source: OS Information
    override predicate isSource(DataFlow::Node source) {
        source = DataFlow::moduleMember("os", [ "hostname", "homedir" ])
    }

    // Sink: DNS Resolve
    override predicate isSink(DataFlow::Node sink) {
        exists( DataFlow::ModuleImportNode importNode, DataFlow::Node flowNode, DataFlow::MethodCallNode methodNode
              | importNode = DataFlow::moduleImport("dns") and importNode.flowsTo(flowNode)
              | methodNode.calls(flowNode, ["resolve", "resolve4", "resolve6"]) and sink = methodNode.getAnArgument()
              )
    }

    // Additional-Step: ...
    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
        // Storing the information in an object property
        exists( DataFlow::PropWrite propWrite
              | propWrite.writes(succ, _, pred)
              )
        or
        // Method-Calling an OS property
        exists( DataFlow::InvokeNode invoke
              | pred = invoke.getCalleeNode() and succ = invoke
              )
    }
}


// To improve query's result message information...
string recoverPropertyName(DataFlow::PropRead node) { result = node.getPropertyName() }


from BugBounty_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink, int flowCount, string propertyName
where cfg.hasFlowPath(source, sink)
  and propertyName = recoverPropertyName( source.getNode() )
  // Reduce the number of flagged packages: >= 2 unique sources (based on property name) to the same sink
  and flowCount = count( string s | exists( DataFlow::PathNode other
                                          | cfg.hasFlowPath(other, sink)
                                          | s = recoverPropertyName( other.getNode() )
                                          )
                       )
  and flowCount >= 2
select sink.getNode(),
       source,
       sink,
       "$@ to $@" + " | Flow Count: " + flowCount + " | Property Name: " + propertyName,
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
