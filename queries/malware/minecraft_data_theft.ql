/**
 * @name minecraft_data_theft
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 9.0
 * @precision low
 * @id npm/discordjs-selfbotjs
 * @tags security
 *       discord
 *       taint
 */

import javascript
import DataFlow::PathGraph


class TargetFile extends StringOps::Concatenation {

    StringOps::ConcatenationLeaf last_LEAF;
    string minecraft_PATH;

    // CharPred
    TargetFile() {
        last_LEAF = this.getLastLeaf()
        and
        minecraft_PATH in [ ".minecraft/launcher_accounts.json"
                          , ".minecraft\\launcher_accounts.json"
                          ]
        and
        exists( string path
              | last_LEAF.mayHaveStringValue(path)
              | path.matches( "%" + minecraft_PATH)
              )
    }

    string get_PATH() { result = minecraft_PATH }
}


// Taint-Tracking configuration for this problem
class Minecraft_Configuration extends TaintTracking::Configuration {
    Minecraft_Configuration() { this = "Minecraft Data" }

    // Source: File PATH
    override predicate isSource(DataFlow::Node source) { source instanceof TargetFile }

    // Sink: Request POST
    override predicate isSink(DataFlow::Node sink) {
        exists( ClientRequest c | c.getADataNode() = sink )
    }

    // Additional-Step: ...
    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
        // Storing the information in an object property
        exists( DataFlow::PropWrite propWrite
              | propWrite.writes(succ, _, pred)
              )
        or
        // Making a require(...) to some flow path
        exists( Require require
              | pred = require.getAnArgument().flow()
              | succ = require.flow()
              )
    }
}


from Minecraft_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink, TargetFile mc_file
where cfg.hasFlowPath(source, sink)
  and mc_file = source.getNode()
select sink.getNode(),
       source,
       sink,
       "$@ to $@ | PATH: " + mc_file.get_PATH(),
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
