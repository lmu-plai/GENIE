/**
 * @name curl_webhook_command
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 9.0
 * @precision low
 * @id npm/test-depss
 * @tags security
 *       command
 *       taint
 */

import javascript
import DataFlow::PathGraph


// Taint-Tracking configuration for this problem
class Curl_WebHook_Configuration extends TaintTracking::Configuration {
    Curl_WebHook_Configuration() { this = "Curl_WebHook" }

    // Source: Suspicious URL
    override predicate isSource(DataFlow::Node source) {
        exists( string s
              | source.mayHaveStringValue(s)
              | s.matches("%webhook.site%")
              )
    }

    // Sink: CURL Command
    override predicate isSink(DataFlow::Node sink) {
        exists( SystemCommandExecution exec, string command
              | exec.getACommandArgument().mayHaveStringValue(command) and command.matches(["curl", "curl %"])
              | sink = [ exec.getACommandArgument(), exec.getArgumentList(), exec.getOptionsArg() ]
              )
    }
}


from Curl_WebHook_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select sink.getNode(),
       source,
       sink,
       "$@ to $@",
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
