/**
 * @name theft-os
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 10.0
 * @precision low
 * @id npm/angieslist-visitor-app-common
 * @tags security
 *       malware
 */

import javascript
import DataFlow::PathGraph


// Taint-Tracking configuration for this problem
class OS_Data_Configuration extends TaintTracking::Configuration {
    OS_Data_Configuration() { this = "OS_Data" }

    // Source: OS/DNS data through specific call
    override predicate isSource(DataFlow::Node source) {
        // OS
        exists( DataFlow::SourceNode os
              | os = DataFlow::moduleMember("os", [ "hostname"
                                                  , "homedir"
                                                  , "userInfo"
                                                  ]
                                           )
              | os = source.(DataFlow::InvokeNode).getCalleeNode()
              )
        or
        // DNS
        exists( DataFlow::SourceNode dns
              | dns = DataFlow::moduleMember("dns", [ "getServers" ])
              | dns = source.(DataFlow::InvokeNode).getCalleeNode()
              )
    }

    // Sink: HTTP Post Request
    override predicate isSink(DataFlow::Node sink) {
        exists( ClientRequest client
              | sink = client.getAMemberCall("write").getAnArgument()
              )
    }

    // Additional-Step: Storing the information in an object property
    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
        exists( DataFlow::PropWrite propWrite
              | propWrite.writes(succ, _, pred)
              )
    }
}


// To improve query's result message information...
string recoverMethodName(DataFlow::MethodCallNode node) { result = node.getMethodName() }


from OS_Data_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink, int flowCount, string methodName
where cfg.hasFlowPath(source, sink)
  and methodName = recoverMethodName( source.getNode() )
  // Requirement: >= 3 unique sources (based on method name) to the same sink
  and flowCount = count( string s | exists( DataFlow::PathNode other
                                          | cfg.hasFlowPath(other, sink)
                                          | s = recoverMethodName( other.getNode() )
                                          )
                       )
  and flowCount >= 3
select sink.getNode(),
       source,
       sink,
       "$@ to $@" + " | Flow Count: " + flowCount + " | Method Name: " + methodName,
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
