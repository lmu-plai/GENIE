/**
 * @name theft-ping
 * @description Query
 * @kind path-problem
 * @problem.severity error
 * @security-severity 10.0
 * @precision low
 * @id npm/on-running-script-context
 * @tags security
 *       malware
 */

import javascript
import DataFlow::PathGraph


// Taint-Tracking configuration for this problem
class PingSteal_Configuration extends TaintTracking::Configuration {
    PingSteal_Configuration() { this = "PingSteal" }

    // Source: OS information through specific call
    override predicate isSource(DataFlow::Node source) {
        // OS
        exists( DataFlow::SourceNode os
              | os = DataFlow::moduleMember("os", [ "hostname"
                                                  , "userInfo"
                                                  , "networkInterfaces"
                                                  ]
                                           )
              | source.(DataFlow::InvokeNode).getCalleeNode() = os
              )
        or
        // Process CWD
        exists( DataFlow::SourceNode process
              | process = DataFlow::globalVarRef("process")
              | source.(DataFlow::MethodCallNode).calls(process, "cwd")
              )
    }

    // Sink: Ping Command
    override predicate isSink(DataFlow::Node sink) {
        exists( SystemCommandExecution command, DataFlow::Node ping
              | ping = command.getACommandArgument() and ping.mayHaveStringValue("ping")
              | sink = command.getArgumentList()
              )
    }

    // Additional-Step: Storing the information in an object property
    override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
        exists( DataFlow::PropWrite propWrite
              | propWrite.writes(succ, _, pred)
              )
    }
}


from PingSteal_Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select sink.getNode(),
       source,
       sink,
       "$@ to $@",
       source.getNode(),
       "SOURCE",
       sink.getNode(),
       "SINK"
